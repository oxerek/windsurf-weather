plugins {
	id 'java'
	id 'groovy'
	id 'idea'

	id 'org.springframework.boot' version '2.5.5'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'com.coditory.integration-test' version '1.2.1'

	id 'com.palantir.docker' version '0.26.0'

	id 'org.openapi.generator' version '5.2.1'
}

group = 'com.sonalake'
version = '1.0.0-SNAPSHOT'
description = "windsurf best spot app"

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

processResources {
	filesMatching('application.properties') {
		expand(project.properties)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	implementation 'org.mapstruct:mapstruct:1.4.2.Final'

	implementation 'io.vavr:vavr:0.10.4'

	implementation 'org.apache.commons:commons-lang3:3.12.0'
	implementation 'org.apache.commons:commons-csv:1.8'

	implementation 'com.google.code.gson:gson:2.8.8'
	implementation 'com.google.code.findbugs:jsr305:3.0.2'
	implementation 'io.swagger:swagger-annotations:1.6.3'

	implementation 'com.hazelcast:hazelcast:5.0'

	implementation 'org.projectlombok:lombok:1.18.22'

	implementation 'com.squareup:javapoet:1.13.0'
	implementation 'org.codehaus.groovy:groovy-all:3.0.8'
	implementation 'io.projectreactor.tools:blockhound:1.0.6.RELEASE'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok:1.18.22'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test:3.4.11'

	testImplementation platform('org.spockframework:spock-bom:2.0-groovy-3.0')
	testImplementation 'org.spockframework:spock-core'
	testImplementation 'org.spockframework:spock-spring'

	testImplementation 'org.codehaus.groovy:groovy-all:3.0.8'
	testImplementation 'com.tngtech.archunit:archunit:0.21.0'
	testImplementation 'com.github.tomakehurst:wiremock:2.27.2'
}

ext['groovy.version'] = '3.0.7'

sourceSets.main.java.srcDir new File(buildDir, 'generated/src/main/java')

idea {
	module {
		generatedSourceDirs += file('build/generated/src/main/java')
	}
}

test {
	useJUnitPlatform()

	afterTest { desc, result ->
		logger.quiet "Executing test \"${desc.name}\" [${desc.className}] with result: ${result.resultType} and took: ${result.endTime - result.startTime}ms"
	}
}

integrationTest {
	useJUnitPlatform()

	afterTest { desc, result ->
		logger.quiet "Executing integration test \"${desc.name}\" [${desc.className}] with result: ${result.resultType} and took: ${result.endTime - result.startTime}ms"
	}
}

openApiGenerate {
	generatorName = "java"
	inputSpec = "$rootDir/spec/weatherbit-swagger.json".toString()
	outputDir = "$buildDir/generated".toString()
	modelPackage = "com.sonalake.windsurfweather.adapters.model"
	generateApiTests = false
	generateModelTests = false
	configOptions = [
			dateLibrary: "java11"
	]
	globalProperties = [
			models: "",
			modelDocs: "false",
			apiDocs: "false"
	]
}

compileJava.dependsOn('openApiGenerate')

task runSpotLocationsEnumGenerator(dependsOn: 'classes', type: JavaExec) {
	main = "SpotLocationsEnumGenerator"
	classpath = sourceSets.main.runtimeClasspath
}

docker {
	def dockerName = "$project.group/$project.name".toLowerCase()
	def dockerTag = project.version.toLowerCase()
	def jarFileName = bootJar.archiveFileName.get()

	name dockerName
	tag 'latest', "$dockerName:$dockerTag"
	files bootJar.archiveFile.get()
	buildArgs([
			jarFileName: jarFileName
	])
	noCache true
}